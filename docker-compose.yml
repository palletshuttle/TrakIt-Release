version: "3.8"

services:
  ai-service:
    build:
      context: .
      dockerfile: src/TrakIt/TrakIt.AI.Service/Dockerfile
    depends_on:
      db-ready:
        condition: service_completed_successfully
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/ai-service:${TAG:-latest}
    networks: [backend]

  db-ready:
    build:
      context: .
      dockerfile: src/TrakIt.DatabaseReady/src/Dockerfile
    environment:
      DELETE_DATABASE: ${DELETE_DATABASE:-}
      MAP_SEED_JSON: ${MAP_SEED_JSON:-}
    image: ghcr.io/palletshuttle/db-ready:${TAG:-latest}
    extends:
      file: docker-compose.base.yml
      service: base
    networks: [backend]

  event-hub:
    build:
      context: .
      dockerfile: src/TrakIt.EventHub/src/Dockerfile
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/event-hub:${TAG:-latest}
    networks: [backend]
    ports: ["8082:8080"]

  shuttle-comms-service:
    build:
      context: .
      dockerfile: src/TrakIt.ShuttleComm.Gateway/src/Dockerfile
    depends_on:
      db-ready:
        condition: service_completed_successfully
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/shuttle-comms-service:${TAG:-latest}
    networks: [backend]
    profiles: [physical]

  ui:
    build:
      context: .
      dockerfile: src/TrakIt.UI/src/Dockerfile
    depends_on:
      db-ready:
        condition: service_completed_successfully
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/ui:${TAG:-latest}
    networks: [backend]
    ports: ["8080:8080"]

  virtual-shuttle-service:
    build:
      context: .
      dockerfile: src/VirtualShuttleService/VirtualShuttleService/Dockerfile
    depends_on:
      db-ready:
        condition: service_completed_successfully
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/virtual-shuttle-service:${TAG:-latest}
    networks: [backend]
    profiles: [virtual]

  web-api:
    build:
      context: .
      dockerfile: src/TrakIt.WebApi/src/Dockerfile
    depends_on:
      db-ready:
        condition: service_completed_successfully
    extends:
      file: docker-compose.base.yml
      service: base
    image: ghcr.io/palletshuttle/web-api:${TAG:-latest}
    networks: [backend]
    ports: ["8081:8080"]

networks:
  backend:
    driver: bridge
# TODO: VTU Service
